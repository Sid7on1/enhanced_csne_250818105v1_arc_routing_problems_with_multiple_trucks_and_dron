{
  "agent_id": "coder3",
  "task_id": "task_3",
  "files": [
    {
      "name": "memory.py",
      "purpose": "Experience replay and memory",
      "priority": "medium"
    },
    {
      "name": "reward_system.py",
      "purpose": "Reward calculation and shaping",
      "priority": "medium"
    }
  ],
  "project_info": {
    "project_name": "enhanced_cs.NE_2508.18105v1_Arc_Routing_Problems_with_Multiple_Trucks_and_Dron",
    "project_type": "agent",
    "description": "Enhanced AI project based on cs.NE_2508.18105v1_Arc-Routing-Problems-with-Multiple-Trucks-and-Dron with content analysis. Detected project type: agent (confidence score: 6 matches).",
    "key_algorithms": [
      "Partitioning",
      "Fleet",
      "Polyhedral",
      "Each",
      "Reinforcement",
      "Smallest",
      "Encoding",
      "Drone",
      "Search",
      "Road"
    ],
    "main_libraries": [
      "torch",
      "numpy",
      "pandas"
    ]
  },
  "paper_content": "PDF: cs.NE_2508.18105v1_Arc-Routing-Problems-with-Multiple-Trucks-and-Dron.pdf\nChunk: 1/1\n==================================================\n\n--- Page 1 ---\nArc Routing Problems with Multiple Trucks and Drones: A\nHybrid Genetic Algorithm\nAbhay Sobhanana, Hadi Charkhgardb, and Changhyun Kwonc\naIndian Institute of Management Bangalore, Bannerghatta Road, Bengaluru, 560076, India\nbDepartment of Industrial and Management Systems Engineering, University of South Florida, Tampa, FL, USA\ncDepartment of Industrial and Systems Engineering, KAIST, Daejeon, 34141, Republic of Korea\nAbstract\nArc-routing problems underpin numerous critical field operations, including power-line\ninspection, urban police patrolling, and traffic monitoring. In this domain, the Rural Post-\nman Problem (RPP) is a fundamental variant in which a prescribed subset of edges or\narcs in a network must be traversed. This paper investigates a generalized form of the\nRPP, called RPP-mTD, which involves a fleet of multiple trucks, each carrying multiple\ndrones. The trucks act as mobile depots traversing a road network, from which drones\nare launched to execute simultaneous service, with the objective of minimizing the overall\nmakespan. Given the combinatorial complexity of RPP-mTD, we propose a Hybrid Genetic\nAlgorithm (HGA) that combines population-based exploration with targeted neighborhood\nsearches. Solutions are encoded using a two-layer chromosome that represents: (i) an or-\ndered, directed sequence of required edges, and (ii) their assignment to vehicles. A tailored\nsegment-preserving crossover operator is introduced, along with multiple local search tech-\nniques to intensify the optimization. We benchmark the proposed HGA against established\nsingle truck-and-drone instances, demonstrating competitive performance. Additionally, we\nconduct extensive evaluations on new, larger-scale instances to demonstrate scalability. Our\nfindings highlight the operational benefits of closely integrated truck-drone fleets, affirming\nthe HGA\u2019s practical effectiveness as a decision-support tool in advanced mixed-fleet logistics.\nKey words: Arc routing problem, hybrid genetic algorithm, mixed-fleet logistics, truck-\ndrone routing\n1 Introduction\nArc Routing Problems (ARPs) represent a fundamental class of optimization problems in logis-\ntics, where the objective is to determine optimal routes that traverse specific arcs or edges in a\nnetwork to satisfy predefined service requirements. In contrast to node routing problems, which\nfocus on visiting designated network nodes, ARPs require servicing along the network\u2019s edges or\narcs. These problems arise in a wide range of real-world applications, including waste collection,\npostal delivery, road maintenance, snow plowing, and inspection of electric power transmission\nlines. Although node routing problems, such as the Traveling Salesman Problem (TSP) and the\nVehicle Routing Problem (VRP), are well-established as NP-hard, ARPs introduce additional\ncomplexities, making them at least equally challenging and computationally demanding. As\na result, they continue to be a topic of significant interest in combinatorial optimization and\nlogistics research.\nIn this paper, we focus on a fundamental variant of the ARP known as the Rural Postman\nProblem (RPP). In the RPP, only a designated subset of edges in the network requires service,\n1arXiv:2508.18105v1  [cs.NE]  25 Aug 2025\n\n--- Page 2 ---\nwhile the remaining \u201cunrequired\u201d edges are traversed solely to enable more efficient routing.\nThe RPP generalizes the classical Chinese Postman Problem (CPP), in which all edges must be\nserviced. This added flexibility makes the RPP particularly well-suited to applications such as\nurban road patrolling, traffic surveillance, and monitoring of energy transmission infrastructure,\nwhere selectively traversing unrequired arcs to reach required ones can significantly reduce\noverall operational costs.\nRecent advancements in drone technology (Wired Magazine, 2017) have given rise to inno-\nvative hybrid logistics systems that integrate traditional ground vehicles, such as trucks, with\nUnmanned Aerial Vehicles (UAVs or drones). This mixed fleet approach significantly enhances\noperational efficiency (Bouman et al., 2018; Murray and Chu, 2015), particularly in environ-\nments where traditional ground-based logistics are impeded by obstacles or traffic congestion.\nWhile drones offer advantages in terms of speed and the ability to bypass ground obstacles, their\nlimited battery capacity inherently restricts their operational range. Integrating drones with\ntrucks addresses this limitation effectively, as trucks can simultaneously serve both as mobile\ndepots, facilitating battery swaps or recharges, and as service vehicles themselves.\nThe integration of multiple trucks and drones, each autonomously deploying from and re-\nturning to its assigned truck, introduces additional complexities and optimization challenges.\nAlthough recent literature has extensively explored such hybrid vehicle-drone systems, exist-\ning studies predominantly address node routing problems. Research addressing truck-drone\ncoordination from an arc-routing perspective remains sparse, primarily due to the added com-\nputational complexity. One notable exception is provided by Liu et al. (2025), which investigates\na constrained variant of the problem featuring a single truck equipped with drones, serving as\na foundation for our broader, multi-vehicle scenario.\nOur study contributes to the literature by addressing a novel extension of the traditional\nRPP involving multiple trucks, each capable of carrying and deploying multiple drones. In\nthis setting, each drone must launch from and return to the same truck, creating complex\ninterdependency between truck routes and drone assignments. The primary objective is to\nminimize the operational makespan, i.e., the total time required to complete all designated\nrequired edge services and return all vehicles to the depot, through coordinated truck-drone\nrouting. Furthermore, our approach incorporates realistic operational constraints, including\ndrone flying time limitations imposed by the battery capacity.\nRecognizing the inherent computational challenges posed by this problem, we propose a Hy-\nbrid Genetic Algorithm (HGA) specifically designed to optimize mixed-fleet coordinated routing\nfor minimal makespan. Our HGA features a distinctive two-part chromosome representation\nthat explicitly encodes the sequencing and directional traversal of required edges, along with\ntheir assignments to trucks and drones. Additionally, we enhance the algorithm with multiple\neffective local search heuristics to systematically guide the exploration of the solution space\ntoward improved optimality. We validate the proposed method through computational experi-\nments on benchmark instances and comparison with an existing algorithm.\nThe remainder of this paper is organized as follows. Section 2 reviews the related literature,\nbeginning with arc routing problems and followed by drone-assisted routing in both node and\narc routing contexts. Section 3 formally defines the problem, detailing the key assumptions and\nfeatures. Section 4 describes the proposed hybrid genetic algorithm based solution approach.\nComputational experiments and performance evaluations are presented in Section 5. Finally,\nSection 6 summarizes the key contributions and outlines directions for future research.\n2\n\n--- Page 3 ---\n2 Literature Review\nIn this section, we provide a comprehensive review of the existing literature relevant to our\nstudy. We begin by examining key research on arc routing problems, highlighting significant\ncontributions in this area. Subsequently, we discuss the node routing literature that focuses\non the integration of truck-drone mixed fleets. Finally, we explore the application of mixed\ntruck-drone fleets within the context of arc routing problems, identifying the existing research\ngaps that our study aims to address.\n2.1 Arc Routing Problems\nThe family of arc routing problems, arising in various logistics applications (Corber\u00b4 an and\nLaporte, 2015), is a crucial area within the routing literature. For an in-depth review of arc\nrouting problems and their variants, readers may refer to Corber\u00b4 an et al. (2021). In this study,\nwe focus on the RPP, a fundamental variant of arc routing problems that seeks the shortest\ntour for a postman to service a designated subset of edges in a network while returning to the\nstarting point. Notably, when all edges must be traversed, this becomes the CPP, analogous\nto the TSP in node routing literature. Several exact methods have been developed for RPP,\nincluding Christofides et al. (1986) and Corber\u00b4 an and Sanchis (1994), as well as for its variants\nsuch as hierarchical (Colombi et al., 2017), profitable (Avila et al., 2016; Colombi and Mansini,\n2014), min-max k-vehicle windy (Benavent et al., 2014), multi-depot (Fern\u00b4 andez et al., 2018)\nand periodic (Benavent et al., 2019) RPPs.\nHowever, RPP is NP-hard (Lenstra and Kan, 1976), necessitating development of near-\noptimal computational approaches for various practical applications. Numerous heuristics have\nbeen proposed for arc routing problems, such as tabu search (Hertz et al., 2000), adaptive\nlarge neighborhood search (Monroy-Licht et al., 2017), ant colony optimization (Santos et al.,\n2010), and genetic algorithms (Arakaki and Usberti, 2018; Lacomme et al., 2001). Genetic\nalgorithms, in particular, have gained popularity as one of the most efficient metaheuristics for\nrouting problems. Vidal (2017) explore extended neighborhoods and solve the CARP using two\napproaches: iterated local search and hybrid genetic search. A recent study, Mahmoudinazlou\net al. (2024) propose a genetic algorithm for solving arc routing problems, leveraging dynamic\nprogramming decisions to assign arcs to vehicles.\n2.2 Truck-Drone Routing Problems\nWe classify the collaborative truck-and-drone routing problems found in the literature into two\nmain categories: node routing and arc routing.\n2.2.1 Node Routing\nThe increasing prevalence of drone-assisted deliveries and surveillance has fueled research in-\nterest in vehicle routing with drones. Murray and Chu (2015) introduced truck routing with\ndrone assistance as the Flying Sidekick Traveling Salesman Problem (FSTSP), presenting two\nmixed-integer linear programming (MILP) formulations and heuristics. A related variant, the\nTraveling Salesman Problem with Drone (TSP-D), emerged subsequently in Agatz et al. (2018).\nMultiple solution methods, including both exact (Roberti and Ruthmair, 2021) and heuristic\n(Bogyrbayeva et al., 2023; El-Adle et al., 2023; Lee et al., 2025; Mahmoudinazlou and Kwon,\n2024) approaches, have been proposed for the TSP-D. More generalized extensions of the TSP-\nD, which incorporate multiple vehicles, have gained attention due to their potential to signifi-\ncantly reduce the makespan. Tamke and Buscher (2021) solve the vehicle routing problem with\n3\n\n--- Page 4 ---\ndrones, consisting of multiple truck-drone pairs, using a branch-and-cut method. They solve\ninstances with up to 30 nodes to optimality. In a recent study, Sobhanan et al. (2024b) address\na humanitarian routing problem involving a truck and multiple drones, introducing an exact\nbranch-and-price algorithm tailored to maximize the coverage in emergency logistics. Their\nresults demonstrate the effectiveness of dynamic programming with dominance rules in solving\nsmall-sized instances, while also highlighting the scalability limitations of exact optimization\napproaches for such complex truck-drone coordination problems. To address larger and more\npractical instances, heuristic and metaheuristic approaches play a crucial role. Sacramento et al.\n(2019) propose an adaptive large neighborhood search method for the vehicle routing problem\nwith multiple trucks, each equipped with one drone. Similarly, Euchi and Sadok (2021) present\na hybrid genetic algorithm for this problem. In this work, we focus on an arc routing equivalent\nof this vehicle routing problem with drones, involving a fleet of multiple trucks and drones. For\ncomprehensive reviews of collaborative truck and drone routing, one can refer to Chung et al.\n(2020) and Macrina et al. (2020).\n2.2.2 Arc Routing\nCampbell et al. (2018) addresses the drone arc routing problem, where a drone, unlike traditional\nvehicles, can travel directly between any two points in the network. This inherent flexibility\nrenders arc routing with drones a continuous optimization problem. To tackle this, Campbell\net al. (2018) discretizes the problem by representing each edge as a polygonal chain. A similar\napproach is extended for the length-constrained k-drones RPP in Campbell et al. (2021). We\nincorporate this flexibility of drone traversal into our study by utilizing a distinct graph where\nedges are constructed based on Euclidean distance. While the drone arc routing problem has\ngarnered attention, studies on the collaborative truck-drone arc routing problem remain limited.\nLiu et al. (2025) employs a joint system of one truck and one drone to solve the rural postman\nproblem. The author proposes a formulation for the node routing equivalent of the problem\nand provide tabu search (TS) and adaptive large neighborhood search (ALNS) algorithms to\nsolve large-scale instances. Additional heuristic methods have been explored in applications like\npowerline inspection (Liu et al., 2019) and traffic patrolling (Luo et al., 2019).\nTable 1: Comparison of related truck-drone routing literature\nReference Node/Arc Trucks Drones Drone Method Problem\nRouting Capacity Size\nLiu et al. (2019) Arc 1 1 D Heuristic 100 nodes\nLuo et al. (2019) Arc 1 1 D Heuristic 24 nodes\nSchermer et al. (2019) Node K M 1 Matheuristic 100 nodes\nSacramento et al. (2019) Node K M 1 ALNS 250 nodes\nTamke and Buscher (2021) Node K M D Exact 30 nodes\nEuchi and Sadok (2021) Node K M 1 GA 200 nodes\nLiu et al. (2025) Arc 1 2 D TS, ALNS 542 nodes\nMahmoudinazlou and Kwon\n(2024)Node 1 1 1 GA 250 nodes\nThis work Arc K M D GA 500 nodes\nTable 1 presents a comparison of existing studies on truck-drone routing problems. Drone\ncapacity Drepresents the number of nodes or arcs a drone can visit during an independent flight\nfrom the truck. To the best of our knowledge, no previous work has proposed a solution approach\nor solved an arc routing problem involving both multiple trucks and multiple drones. Our study\nfills this gap by developing a tailored genetic algorithm to solve this problem. Additionally, we\n4\n\n--- Page 5 ---\nextend a traditional assumption of truck-drone routing by allowing drones to traverse multiple\narcs, subject to a predefined flying time limit.\n3 Problem Description\nConsider an undirected graph G= (V,E), consisting of a set of vertices Vand a set of edges\nEthat connect the vertices in V. Each edge ( i, j)\u2208 Eis associated with a positive distance\nor cost, denoted by \u03c1(i, j). Furthermore, a subset of edges R \u2286 E is designated as \u201crequired\u201d,\nmeaning these edges must be included in any feasible route, while the remaining edges are\noptional. RPP seeks to find a closed tour in Gthat traverses every required edge in Rat least\nonce, while minimizing the total cost of the route. The total time is the sum of the travel time\nof all traversed edges, including any edges that are traversed multiple times. Since the RPP\nis known to be a NP-hard problem, finding an optimal solution efficiently is computationally\nchallenging for large instances.\nNumerous algorithms (Corber\u00b4 an et al., 2000; Monroy-Licht et al., 2014; Pearn and Wu,\n1995) have been devised to address the RPP, motivated by its practical significance in various\nrouting contexts. This study extends the classical RPP to include multiple drone assistance for\nground vehicles, a variant we refer to as the RPP with multiple Trucks and multiple Drones\n(RPP-mTD). In this model, the truck acts as a mobile station for each drone designated to it\nwhen the drones are not in flight. This variant of RPP enhances operational efficiency through\ncoordinated truck-drone operations. We assume a depot serves as both the starting and ending\npoint for the truck-drone fleet. While incorporating a depot node technically transforms the\narc routing problem into a general routing problem, we treat it as a special case given the sole\ninvolvement of the depot.\nThe objective function of RPP-mTD is to minimize the makespan, which represents the\ntotal time required to complete all services and return the fleet to the depot, while determining\nthe optimal cooperative routes for the truck and drones. Every required edge in the network\nmust be serviced at least once by either a truck or a drone. Here, multiple traversals of edges\nare permitted and is accounted for in the makespan.\n3.1 Key Assumptions\nWe explore the RPP-mTD under the following additional assumptions:\n1.Fleet Composition: The fleet consists of one or more trucks ( K), where each truck carries\na fixed number ( M) of identical drones. The drones are homogeneous in terms of battery\ncapacity and speed, which together determine the maximum allowable flying time for each\ndrone.\n2.Truck\u2013Drone Operational Rules: A drone may take off from or land on its associated truck\nonly at vertices where the truck is stationed at that moment. Take-off and landing times\nare assumed to be negligible. In this setup, trucks function as mobile launch and recovery\nplatforms. While drones operate independently during flight, trucks provide essential\nlogistical support, such as instantaneous battery replacement or recharging upon drone\nlanding. Furthermore, when trucks traverse a required edge, they directly service it.\n3.Drone Routing Flexibility: Unlike the trucks, drones are capable of flying directly be-\ntween vertices without following the predefined road network. A drone can thus bypass\nground obstacles by directly flying between any two vertices. To accommodate drone\nmovement, an auxiliary drone-specific graph is implicitly considered, constructed by es-\ntablishing Euclidean direct edges between all vertex pairs, regardless of road connectivity.\n5\n\n--- Page 6 ---\nWhen traversing non-required edges, the drone is assumed to follow the corresponding arc\nin this auxiliary graph. However, when servicing a required arc, the drone instead follows\ntheshadow of that arc in the original graph to ensure proper coverage.\n4.Flight Range Constraint: Drone flights are restricted by their maximum flight time, limited\nby battery capacity. The flight duration of any drone sortie cannot exceed this predefined\nlimit. Upon returning to a truck, a drone\u2019s battery is instantly replaced or recharged,\nresetting its available flight time for subsequent operations.\n5.Drone Multi-Arc Visit Flexibility: Unlike in some known routing problems involving drone\nassistance, such as the TSP-D, each drone in the RPP-mTD may service multiple required\nedges consecutively during a single flight, subject to its flight range constraint.\nDrone path\nTruck pathr1\nr2\n\u03b4= 2Required arc\nUnrequired arc\nFigure 1: An example of the \u03b4-hop rendezvous mechanism with \u03b4= 2. Here, the drone lands\non the last permissible node within the allowed limit.\n6.Drone\u2013Truck Coordination Flexibility: We introduce a hyperparameter, \u03b4, to control the\nextent of independence between a drone\u2019s movement and its originating truck. When\n\u03b4= 1, the model adheres to the restricted assumption: the drone is launched and retrieved\nat consecutive truck nodes, with the truck traversing only one arc during the drone\u2019s flight.\nIn contrast, when \u03b4=L, the truck is permitted to travel up to Larcs after launching\nthe drone before rendezvousing for retrieval. Figure 1 illustrates a scenario where \u03b4= 2\ninvolving one truck and one drone. In this example, the drone returns to the truck at\nthe farthest node permitted within the \u03b4-hop limit. Increasing \u03b4significantly enlarges the\nsolution space, as the drone can potentially land at any node visited by the truck within\nthe allowed \u03b4-hop window. This added flexibility can lead to more efficient routing, leading\nto a reduction in overall makespan. However, practitioners should note that very large\nvalues of \u03b4may introduce practical challenges, such as increased difficulty in real-time\ncommunication and a higher risk of coordination failures.\n3.2 An illustrative Example\nAn illustrative example of a feasible RPP-mTD solution with seven required arcs is shown\nin Figure 2. In this scenario, two trucks, k1andk2, are each equipped with two drones.\nSpecifically, k1carries drones d1andd2, while k2carries drones d3andd4. Notably, drone\nd4remains idle throughout the operation. Among the seven required arcs, two are serviced\nby drone d1, one by drone d2, one by drone d3, and one by each truck. In this example, the\ncoordination parameter is set to \u03b4= 2, allowing a maximum separation of two hops between\ndrone launch and retrieval. Drones d1andd2fully utilize this \u03b4-hop flexibility, while drone d3\ndoes not. The figure illustrates the coordinated interaction between trucks and their assigned\ndrones, highlighting how the RPP-mTD framework leverages ground\u2013aerial collaboration to\nimprove efficiency and reduce makespan.\n6\n\n--- Page 7 ---\nTruck k1v1\nv2\nv3v4\nv5\nv6d1\nv7\nv14d2\nTruck k2v8\nv9v10v11\nv12\nv13d3Depot\nTruck arc\nDrone arc\nRequired arc\nUnrequired arc\nFigure 2: An illustrative RPP-mTD solution: two trucks k1andk2, each carrying two\ndrones\u2014 k1carries d1andd2;k2carries d3andd4. Notably, d4remains idle in this routing\nscenario.\n3.3 Problem Complexity and Formulation Challenges\nThe assumptions made in the previous subsection significantly generalize the problem under\nstudy compared to the existing body of literature (see arc routing papers in Table 1). This is\ndue to the introduction of several additional flexibility dimensions, including but not limited\nto the involvement of multiple trucks, multiple drones, drone multi-arc visit flexibility, and\ndrone\u2013truck coordination flexibility. Unlike classical arc-routing problems or single-truck drone-\nassisted routing models, RPP-mTD encompasses multiple intertwined decision layers, ranging\nfrom vehicle routing and positioning to service assignment and drone endurance constraints.\nThis intricate interplay greatly expands the solution space and makes the problem considerably\nmore challenging.\nWe note that developing an integer programming model that fully captures these complex-\nities is highly complicated and provides limited practical value, as such models quickly become\nintractable for state-of-the-art solvers. Therefore, we do not present an exact optimization\nmodel in this paper. Instead, we note that Liu et al. (2025) demonstrate the inherent modeling\ncomplexity even for a very special case of our problem (i.e., one truck and one drone), where\nthe computational burden already renders exact methods impractical. In their study, Liu et al.\n(2025) transform arc-routing problems into equivalent node-routing formulations (Longo et al.,\n2006) to address truck\u2013drone coordination, and subsequently design heuristic solution methods\ndue to its computational complexity. While the formulation is effective for their restricted set-\nting, this approach introduces substantial computational overhead by enlarging the underlying\ngraph, which further limits scalability.\nGiven that our problem setting is far broader, exact optimization techniques are unlikely to\nbe meaningfully applied in real-world scenarios. Additionally, unlike Liu et al. (2025), we do\nnot rely on node-transformation techniques, which allows us to avoid the additional complexity\nand overhead associated with graph expansion and an increased fleet size. This observation un-\nderscores the need for efficient heuristic approaches capable of producing high-quality solutions\nwithin reasonable computational times, which is the main goal of our study.\n7\n\n--- Page 8 ---\n4 Methodology\nIn this section, we present the Hybrid Genetic Algorithm (HGA) developed to solve the RPP-\nmTD. Our approach builds on established evolutionary computation frameworks while incor-\nporating several novel components that set it apart from standard implementations. These\ninnovations, essential to the algorithm\u2019s effectiveness, are specifically designed to address the\nunique challenges of coordinated makespan optimization in multi-fleet truck-and-drone routing.\nThe algorithm iteratively applies a combination of traditional and custom genetic operators,\ncomplemented by powerful local search procedures, to refine solutions and guide the search\ntoward a global optimum.\n4.1 Graph Abstraction\nWe adopt a graph abstraction to enable straightforward solution representation and to appropri-\nately capture truck and drone movements during evaluation. The underlying network consists\nof both required and unrequired edges. Trucks are constrained to travel along this network\ntopology. Drones, however, operate in a hybrid mode: they fly unconstrained, point-to-point\n(Euclidean distance) between launch and recovery nodes, but must explicitly traverse the path\nof any required edge they are assigned to service.\nTo support the efficient evaluation of several candidate solutions, we preprocess the graph\nto compute the shortest paths between the endpoints of all required edges. This abstraction\nreduces the complex pathfinding challenge to a high-level sequencing problem. As a result, the\ntraversal time between any two consecutive service tasks can be retrieved from a precomputed\nlookup table rather than being repeatedly recomputed, which is critical for the algorithm\u2019s\nperformance.\n4.2 Solution Representation\nFor an effective optimization process, it is crucial to establish a valid representation of the\nsolution. To capture the distinctive characteristics of the solution space, we adopt a two-part\nchromosome encoding approach:\n1.Service Sequence: This component is an ordered list representing all required edges that\nmust be traversed, each uniquely indexed. With Rrequired edges, this chromosome\nsegment has length R. Each required edge is accompanied by a direction marker to\nindicate traversal direction: a positive index denotes forward traversal, while a negative\nsign indicates traversal in the opposite direction. Collectively, this chromosome part\ndefines the sequence of service and traversal orientations.\n2.Vehicle Assignment: This part complements the service-order sequence by specifying the\nvehicle responsible for each service step. Each vehicle is assigned a unique identifier to\nfacilitate differentiation. For example, in a configuration with K= 2 trucks, each equipped\nwith M= 2 drones, the numbering proceeds as follows: Truck 1 is labeled as 1, its drones\nas 2 and 3, Truck 2 as 4, followed by its drones as 5 and 6, respectively. Figure 3 shows\nan example of the chromosome encoding for a problem with R= 7, illustrating how the\nrepresentation can be decomposed for a truck system. Tasks assigned to a truck and its\nassociated drones collectively constitute the tour of that truck-drone system, and those\nallocated specifically to individual drones form their respective sorties.\nSince both parts of the chromosome are of equal length and jointly capture all necessary\ninformation, a complete routing plan for the vehicles can be derived directly by interpreting the\n8\n\n--- Page 9 ---\n7 1 -3 5 6 -4 2\n6 2 5 3 4 3 6Service Sequence\nVehicle Assignments\n(a) Two-part chromosome encoding: the service sequence of required edges (top) and vehicle assignments\n(bottom).\n7 -3 6 2\n6 5 4 6\n(b) Decomposition for Truck-Drone System 2\nFigure 3: An example solution representation of an RPP-mTD with R= 7,K= 2 and M= 2\nchromosome. This representation clearly separates what must be done (the exact sequence and\norientation of required arcs) from which vehicle performs it, while maintaining full synchroniza-\ntion between the two components.\n4.3 Route Construction for Evaluation\nTo translate a chromosome into a complete routing plan and evaluate its quality, we follow\na clear decoding process. First, the full route for each vehicle is constructed by connecting\nits assigned service tasks. When connecting two consecutive tasks, if multiple precomputed\nshortest paths of equal length (co-optimal paths) exist, one is randomly sampled. This random\nchoice occurs during the creation and modification of solutions, introducing valuable structural\ndiversity into the population by exploring different intermediate nodes for drone operations.\nSecond, the process handles structural inefficiencies implicitly. In cases where the shortest\npath between required edges riandrjhappens to pass through another required edge rk, the\nresulting route is valid but contains a redundancy. Such solutions are not explicitly forbidden\nor repaired. Instead, their naturally longer makespan results in a poorer fitness score, and they\nare less likely to be selected for propagation, allowing the evolutionary search to organically\nfavor more efficient orderings (e.g., ... ri, rk, rj...). The quality of a decoded plan is ultimately\nmeasured by its makespan, which serves as the primary input to the fitness function described\nin the following section.\n4.4 Fitness Function\nThe fitness of each candidate solution is measured by its makespan, i.e., the total time required\nto service all designated edges and return to the depot. To compute this makespan, we first\ndetermine each truck\u2019s route duration by summing the travel times along the shortest paths\nthat connect the pairs of required arcs in its service sequence (including any necessary repeats\nof edges). Next, we calculate each drone\u2019s flight time using the straight-line distance between\nnon-required edges, based on the potential launch and recovery vertices. For required edges, the\ndrone\u2019s travel time is computed along the given edges. We also verify that every drone route\n9\n\n--- Page 10 ---\nrespects the maximum allowable flight time, \u03c4, and does not exceed the permitted number of\nintervening truck-traversal arcs, \u03b4, between take-off and landing points. Finally, the drone paths\nare selected based on their effect on the objective value.\nAfter the makespan T(I) of an individual Ihas been calculated, we translate it into a fitness\nscore F(I). Note that any solution violating the drone-range constraint incurs a range-violation\npenalty\nwinfDX\nd=1\u0000\n\u03c4max(d)\u2212\u03c4\u0001+\nadded directly to its makespan. Here, \u03c4max(d) denotes the highest independent flight time of\ndrone d, and ( x)+= max {0, x}.winfis the penalty that we dynamically adjust throughout\nthe genetic algorithm. To encourage population diversity, we also compute each individual\u2019s\ndiversity score \u03b4(I) as the normalized Hamming distance to its two nearest neighbors (Sobhanan\net al., 2024a). If nEdenotes the number of elite individuals in the population and nPis the\ntotal population size, then the fitness function for a chromosome Iis defined as\nF(I) = T(I)\u00d7\u0012nE\nnP\u0013\u03b4(I)\n.\nTherefore, solutions with lower fitness values, reflecting both shorter effective makespans and\ngreater niche differentiation, are preferred in the selection process.\n4.5 Initial Population\nThe initial population of solutions is generated using a hybrid strategy that combines purely\nrandom initialization with targeted initialization. Specifically, a fraction ptof the population\nis seeded by a problem-specific heuristic that identifies promising drone\u2013truck routing plans.\nBy incorporating these makespan-aware individuals alongside randomly generated solutions,\nthe genetic algorithm benefits from both high-quality starting points and broad population\ndiversity.\nEach targeted individual is constructed in two steps. First, we build a simple RPP service\nsequence: starting at the depot, we iteratively append the as-yet-unserved required edge whose\nnearest endpoint to the current truck location that minimizes the incremental truck travel\ntime, while respecting edge directionality by choosing the traversal order ( u, v) or ( v, u) that is\nmost efficient. Second, we apply a greedy makespan-minimization assignment. We traverse the\nresulting service sequence and, for each arc ( u, v), compute the projected completion time if\nserved by each of the Ktrucks or any of their K\u00d7Mdrones, tracking each truck\u2019s current node\nand accumulated drive time, along with each drone\u2019s cumulative flight time. We then assign\nthe arc to the vehicle that yields the smallest overall makespan.\n4.6 Evolutionary Process\nThe population evolves through an iterative evolutionary process involving selection, crossover,\nand mutation, executed for a predefined maximum number of generations G. At each generation,\noffspring solutions are generated by combining existing solutions through genetic operations,\nensuring exploration of diverse and potentially superior solutions.\nCrossover operators play a crucial role by combining chromosome sequences from pairs of\nparent solutions to produce offspring inheriting traits from both parents. Parent solutions are\nselected using binary tournament selection based on their fitness scores. We randomly apply\none of three crossover methods. The Order Crossover (OX) method involves selecting two\n10\n\n--- Page 11 ---\ncut points in the chromosome sequence, copying the segment between these points from one\nparent into the offspring, and filling the remaining positions sequentially with genes from the\nother parent, skipping genes already copied. The Partially Mapped Crossover (PMX) exchanges\nsegments between two cut points while resolving duplicate genes through a mapping process\nbetween parents, ensuring valid offspring permutations.\nAdditionally, we propose a novel, problem-specific crossover operator termed Segment-\nPreserving Crossover , tailored explicitly for the truck-drone system context. This operator\nselects a complete segment corresponding to all visits handled by a single truck system and its\nassociated drones from one parent, and extracts the corresponding segment from the other par-\nent. Subsequently, either OX or PMX is applied exclusively to these segments. The generated\nsegment is then reintegrated into copies of the original parents, followed by a repair procedure.\nThe repair step corrects any duplicate or missing visits by incorporating appropriate arcs from\nthe opposite parent. Consequently, this method yields two feasible offspring preserving intact\ntruck system-level segments.\nMutation operations occur with an initial probability pm, introducing minor random varia-\ntions within chromosome structures to explore new solution spaces and maintain genetic diver-\nsity. To mitigate stagnation, if no improvement in solution quality is observed for Gmconsecu-\ntive generations, we dynamically increase the mutation probability to p+\nm. Mutation is executed\nby randomly selecting one of three operators applied to both the service sequence and vehicle\nassignment components of the chromosome: (1) Swap Mutation selects two positions at ran-\ndom and exchanges their genes, (2) Inversion Mutation selects a random subsequence between\nindices i < j and reverses it in place, and (3) Reassignment Mutation , designed specifically for\nvehicle assignments, randomly selects a single gene and assigns it to a different vehicle.\nThroughout the evolutionary process, the population size is maintained within the interval\n[PL, PH]. After generating offspring solutions at each generation, the population is sorted\nbased on the fitness function, and only the best-performing PLindividuals are retained for\nsubsequent generations. This strategy effectively balances diversity with exploration of high-\nquality solutions. Additionally, a maximum of PHcandidate solutions is generated at each\niteration through combined evolutionary operations and local search refinements. To further\npromote convergence, the top 1% of the solutions are explicitly preserved across generations.\nThis elitist strategy ensures that superior solutions are not lost due to stochastic variation.\n4.7 Local Search and Refinement\nTo further enhance exploration and mitigate the risk of becoming trapped in local optima, each\nnewly generated population undergoes a dedicated local improvement phase. Following the\nevaluation of offspring fitness, individuals are sorted in ascending order of their fitness scores,\nand the top 20% are selected for further refinement. Each selected individual is subjected\nto a bounded iterative local search process, limited to a number of steps ( lssteps ). This\nprocess involves randomized exploration of the solution\u2019s neighborhood, and unlike the mutation\nprocedure, only strictly improving moves are accepted. This ensures a monotonically non-\nincreasing makespan and steady progression toward local optimality.\nAt each iteration of the local search, a candidate solution is modified using one randomly\nchosen neighborhood search operator from the following five strategies:\n1.Subsequence Reversal : Selects and reverses a subsequence of the overall service sequence\nand the corresponding vehicle assignments, to potentially reveal more efficient orderings.\n2.Or-opt : Relocates a contiguous block of up to brequired arcs to a different position in\nthe sequence, preserving their internal order, to exploit local structural improvements.\n11\n\n--- Page 12 ---\n3.Drone Sortie Optimization : For each drone, attempts to improve the internal ordering of\nassigned arcs when the sortie length exceeds a threshold (e.g., \u22653), effectively solving\nsmall intra-sortie Traveling Salesman subproblems.\n4.Greedy Vehicle Reassignment : Evaluates alternative vehicle assignments for an arc, iden-\ntifies the reassignment yielding the greatest reduction in makespan, and applies the most\nbeneficial changes.\n5.Ruin-and-Construct : Temporarily removes a proportion pruinof the required arcs and\nreinserts them into positions and assigns vehicles that minimize the resulting makespan,\nleading to additional exploration of the solution space.\nAfter applying a neighborhood move, the solution\u2019s fitness is re-evaluated. If the resulting\nmakespan is strictly better than that of the incumbent solution, the candidate replaces it. This\nprocess is repeated for up to lssteps iterations, after which the locally refined individual is re-\nturned. Once all selected candidates in the current generation have undergone local refinement,\nthe resulting pool is trimmed based on fitness to restore the original population size.\nBy integrating broad global search via genetic evolution with focused local refinement, our\nhybrid genetic algorithm (HGA) strikes a robust balance between diversification and exploita-\ntion. This balance leads to high-quality solutions with minimized makespan. Upon convergence,\nthe best solution found across all generations is selected as the final output, representing a prac-\ntically deployable multi-fleet truck-drone routing plan.\n5 Computational Study\nIn this section, we present a series of experiments to evaluate the performance of the proposed\nheuristic for the RPP-mTD under various problem settings. All algorithms and experimental\nprocedures are implemented in Julia 1.11.5 and executed on a MacBook Pro equipped with\nan Apple M1 chip, 16 GB of RAM, and running macOS Sequoia 15.5. The parameters used\nin our experiments are as follows: nE= 0.8nP,G= 100, Gm= 10, PL= 100, PH= 200,\nwinf\u2208[0.01,100.0],pt= 0.1,pm= 0.1,p+\nm= 0.3,pruin= 0.2, and lssteps = 30.\nWe conduct two types of experiments. First, we benchmark our algorithm using the instances\nprovided in Liu et al. (2025), focusing on a restricted setting with K= 1 truck and M= 1\ndrone. This allows for a controlled comparison of a special case with the existing method, using\none of their parameter configurations with the drone speed ( sdrone = 2) and the truck speed\n(struck = 1), the most common situation in practical applications (Harrison, 2025). Second,\nwe generate a set of large-scale RPP-mTD instances to analyze the algorithm\u2019s scalability\nand responsiveness to different problem characteristics. Specifically, we examine the effects of\nvarying vehicle compositions, drone ranges, and the \u03b4-hop window. In these experiments, truck\ntravel time on an edge is calculated by dividing its arc length by a constant cruise speed of\n40 km h\u22121. Since drones are generally faster than trucks (Harrison, 2025), especially in urban\nenvironments, their flight time is computed using a cruise speed of 80 km h\u22121(Aurambout et al.,\n2022). Each sortie is further limited by a maximum airborne time of 60 minutes, reflecting the\nbattery capacity constraints.\nFor the second set of experiments, we generate RPP test instances based on a 10 km \u00d710 km\nsquare grid that approximates an urban district. First, the number of nodes Nis selected such\nthatN\u2208[50,500], and node coordinates are generated randomly on the square grid. A graph\nis then constructed by connecting the nodes using random edges. To ensure that routes exist,\nwe retain the largest connected component and discard any isolated nodes or subgraphs. A\nsubset of these edges is then designated as required, with its cardinality selected from the range\n12\n\n--- Page 13 ---\n[15,100]. All edge lengths in the ground network are measured using the Manhattan metric to\nrealistically capture rectilinear street layouts. For each instance size considered, we generate\nfive test instances per instance class.\n5.1 Benchmark Evaluation\nIn Table 2, we present a benchmark evaluation of our proposed approach applied to the special\ncase of the RPP-mTD problem with a single truck carrying one drone. We utilize benchmark\ninstances originally introduced in Liu et al. (2025). In this experiment, we do not impose a\nlimit on the \u03b4-hop window. Additionally, we analyze the impact of varying values of \u03b2, a\nhyperparameter from their study, to determine the drone flying time limit, defined as follows:\n\u03c4=\u03b2\nsdrone\u00d7Average edge distance in the drone graph (1)\nTable 2: Benchmark evaluation results for RPP-mTD with 1 truck and 1 drone\nInstance Class \u03b2Best KnownALNS HGA\nObj Time* Gap Obj Time Gap\n(sec) (%) (sec) (%)\nN10E20R51 358.22 365.32 11.23 1.98 368.82 2.82 2.96\n2 256.43 263.23 7.32 2.65 260.80 3.15 1.70\n3 196.29 200.42 5.43 2.10 196.76 3.15 0.24\nN10E20R71 461.53 470.34 16.23 1.91 475.62 6.92 3.05\n2 319.89 326.43 34.23 2.04 321.96 7.97 0.65\n3 237.08 242.53 43.42 2.30 242.82 8.48 2.42\nN10E20R101 591.06 599.42 284.55 1.41 629.20 16.39 6.45\n2 394.15 400.23 204.32 1.54 399.86 22.12 1.45\n3 284.21 289.53 221.23 1.87 289.26 24.99 1.78\nN15E30R51 446.42 452.32 4.63 1.32 456.50 2.77 2.26\n2 340.98 344.52 7.83 1.04 349.48 2.08 2.49\n3 253.60 259.32 6.58 2.26 263.64 1.94 3.96\nN15E30R71 533.58 547.63 19.43 2.63 552.46 6.44 3.54\n2 399.35 410.23 35.64 2.72 404.54 5.21 1.30\n3 282.83 289.53 55.47 2.37 287.80 4.78 1.76\nN15E30R101 660.18 675.73 210.24 2.36 690.34 16.45 4.57\n2 481.08 510.23 199.53 6.06 481.08 20.73 0.00\n3 337.74 359.34 178.46 6.40 337.56 22.19 -0.05\nAverage 379.70 389.24 85.88 2.50 389.36 9.92 2.25\nThe results indicate that our method achieves competitive performance compared to the\nALNS. Specifically, our method has an average optimality gap of 2 .25%, closely matching\nALNS, which achieves a gap of 2 .5%. It is worth emphasizing that while ALNS is specifi-\ncally tailored for single-truck routing scenarios, our solution method is more general, capable\nof addressing broader configurations of the problem. Moreover, our approach demonstrates\nnotable advantages over existing benchmarks. For instance, in one specific scenario (instance\nclass N15E30R10 with \u03b2= 3), our method outperforms the best-known solution obtained us-\ning a MILP solver that was executed with a one-hour time limit. Additionally, our algorithm\nsignificantly reduces computational time compared to ALNS, delivering solutions significantly\nfaster. Note, however, that the ALNS results were reported in the benchmark study using a\nworkstation equipped with a 2.2 GHz Intel Xeon E5-2630 processor and 32 GB of RAM. Using\ndata from https://www.cpubenchmark.net/ , we compared the single-thread performance of\nthe Xeon processor to that of our system. Based on this comparison, we estimate that if ALNS\nwere executed on our hardware, its average runtime would be approximately 40.3 seconds, as\nopposed to the value reported in the benchmark study. Nevertheless, even under this adjusted\n13\n\n--- Page 14 ---\n0 50 100 150 200200250300350400\nGenerationsObjective ValueNew best solutionFigure 4: Convergence of the proposed HGA across generations for an instance with R= 100\nestimate, our HGA algorithm maintains a clear advantage in computational efficiency, delivering\nsolutions in significantly less time.\n5.2 Scalability and Responsiveness Evaluation\nWe now conduct experiments on larger instances to better understand and empirically evaluate\nthe factors that influence both the RPP-mTD and our proposed HGA. Before presenting the\nvarious experiments and results in this subsection, we first highlight the performance of the\nproposed HGA on a representative instance. This provides evidence that the algorithm does\nnot waste computational resources; rather, it continuously searches for improved solutions until\nconvergence. Figure 4 illustrates the convergence behavior of the HGA over generations for\nan instance with R= 100, using a configuration of K= 2 trucks, M= 2 drones per truck,\nand a drone flying time limit of \u03c4= 1.0 hour. As observed, the proposed method quickly\nidentifies a feasible solution early in the search with an objective value of approximately 265.\nAt approximately 150 generations, it finds the best solution with an objective value near 180,\ncorresponding to an improvement of roughly 32%. After 200 iterations, the algorithm terminates\nand reports the best solution found.\n5.2.1 Analysis of the Impact of Vehicle Composition\nIn this experiment, we analyze how the makespan of the system changes with respect to different\ncombinations of trucks and drones, in addition to the computational complexity it possesses as\nwe increase the fleet size. Tables 3 and 4 present the results of our method applied to varying\nvehicle compositions, specifically with K\u2208 {1,2,3}trucks and M\u2208 {1,2,3}drones. All the\nexperiments were conducted using fixed parameters \u03b4= 5 and \u03c4= 1.0 hour. Using our proposed\nHGA, we examine how changes in the number of trucks and drones influence solution quality\nand computational runtime.\nAcross all instance classes, increasing the number of trucks consistently led to substantial\nreductions in the makespan. For example, in instance N200E400R50, transitioning from a single\ntruck with one drone to a three-truck setup, each still equipped with one drone, reduced the\nmakespan by approximately 57.6%, from 139.2 to 59.0. Similar patterns were observed across\nall problem sizes, underscoring the advantage of using multiple trucks for parallel coverage,\nparticularly in larger networks. Adding drones per truck generally improved solution quality\n14\n\n--- Page 15 ---\nTable 3: Impact of vehicle composition on solution quality and runtime - Part 1\nInstance1 Truck 2 Trucks\nM= 1 M= 2 M= 3 M= 1 M= 2 M= 3\nObj Time Obj Time Obj Time Obj Time Obj Time Obj Time\n(min) (min) (min) (min) (min) (min)\nN50E100R15 33.8 0.2 32.2 0.3 32.2 0.3 20.8 0.3 20.5 0.4 20.4 0.5\nN50E100R20 45.4 0.4 44.3 0.5 42.2 0.6 27.0 0.6 26.8 0.8 25.2 1.0\nN100E200R25 70.1 0.6 68.4 0.9 65.7 1.0 42.2 1.1 38.9 1.2 38.9 1.6\nN100E200R30 80.2 0.9 77.1 1.4 76.9 1.7 48.4 1.8 45.1 2.3 44.4 3.0\nN200E400R40 122.2 2.1 112.1 3.3 109.9 4.0 67.9 4.1 63.3 5.0 61.9 6.5\nN200E400R50 139.2 4.2 136.1 6.3 130.5 7.6 81.6 7.6 78.0 9.4 74.7 11.9\nN300E600R50 148.6 4.4 142.2 6.7 139.6 8.1 85.8 8.0 83.0 10.3 81.3 12.6\nN300E700R70 203.7 11.8 189.4 17.6 188.2 20.8 112.8 20.7 108.0 25.7 104.3 32.0\nN400E800R80 267.7 18.4 251.8 27.5 242.5 32.0 149.8 32.8 143.5 40.1 135.8 49.8\nN500E1000R100 321.0 38.5 312.8 57.2 302.6 65.8 186.0 66.7 174.5 83.2 168.3 98.6\nTable 4: Impact of vehicle composition on solution quality and runtime - Part 2\nInstance3 Trucks\nM= 1 M= 2 M= 3\nObj Time Obj Time Obj Time\n(min) (min) (min)\nN50E100R15 16.4 0.5 16.3 0.6 16.1 0.6\nN50E100R20 20.7 0.9 20.2 1.0 19.7 1.3\nN100E200R25 31.7 1.7 29.8 1.9 29.4 2.3\nN100E200R30 35.4 2.8 34.4 3.2 34.1 3.8\nN200E400R40 48.5 6.3 46.2 7.1 46.0 8.8\nN200E400R50 59.0 11.9 56.0 13.4 55.5 16.3\nN300E600R50 64.6 12.3 58.9 14.1 58.9 17.2\nN300E700R70 82.4 32.8 76.1 36.1 76.1 43.8\nN400E800R80 109.5 49.1 102.2 55.2 100.5 65.3\nN500E1000R100 131.2 97.8 125.2 112.0 121.2 131.3\n15\n\n--- Page 16 ---\nTable 5: Impact of drone flying time on the solution and runtime\nInstance\u03c4= 0.5 \u03c4= 1.0 \u03c4= 1.5 \u03c4= 2.0\nObj Time Obj Time Obj Time Obj Time\n(min) (min) (min) (min)\nN50E100R15 23.7 0.3 20.5 0.4 13.8 0.5 9.1 0.5\nN50E100R20 29.8 0.6 26.8 0.8 18.7 0.9 12.1 1.0\nN100E200R25 48.1 1.0 38.9 1.2 27.9 1.7 19.7 1.7\nN100E200R30 52.8 1.7 45.1 2.3 32.5 2.6 21.6 2.8\nN200E400R40 79.2 3.7 63.3 5.0 42.0 5.9 29.2 6.3\nN200E400R50 91.5 6.7 78.0 9.4 52.8 10.9 36.3 11.5\nN300E600R50 101.3 7.1 83.0 10.3 56.0 11.5 40.6 12.0\nN300E700R70 129.8 17.6 108.0 25.7 74.7 28.1 54.5 30.3\nN400E800R80 170.9 26.4 143.5 40.1 101.8 43.1 71.2 46.1\nN500E1000R100 206.3 53.4 174.5 83.2 122.1 85.9 86.9 91.5\nas well, although the marginal gains diminished with each additional drone due to drone range\nlimitations. Introducing a second drone per truck consistently yielded noticeable improvements\nin the objective value. However, the benefit of adding a third drone was often limited, especially\nin larger, multi-truck configurations. For instance, in the N400E800R80 case with three trucks,\nthe improvement in the objective was only 1.7%, when increasing from two to three drones per\ntruck, despite a significant increase in computational runtime from 55.2 to 65.3 minutes.\nFrom a computational perspective, the runtime of our HGA algorithm increases signifi-\ncantly with the number of trucks and drones. This overhead becomes especially noticeable as\nmore drones or trucks are added, reflecting the increased complexity of coordinating multiple\ndrone routes with corresponding truck schedules. This effect is especially evident in larger in-\nstances. In the N500E1000R100 scenario, for example, the runtime nearly doubled, from 57.2\nto 112.0 minutes, when moving from a single-truck, two-drone setup to a three-truck configu-\nration with two drones each. These empirical results clearly highlight the trade-offs between\nsolution quality and computational complexity. While deploying multiple trucks consistently\nenhances performance by enabling parallel operations, drone allocation requires greater caution\ndue to their limited flight range. Given the diminishing marginal gains and the sharp increase\nin computational burden, a balanced strategy is essential when configuring larger fleets.\n5.2.2 Analysis of Drone Flying Time Limit\nTable 5 reports the impact of increasing the drone flying time limit \u03c4on both makespan and\ncomputational runtime, with \u03b4= 5 and a fixed fleet of two trucks each carrying two drones.\nAs\u03c4increases from 0.5 to 2.0 hours, drones can service more distant arcs and the makespan\nfalls steadily in every instance. In the smallest network class (N50E100R15), for example, the\nobjective decreases from 23.7 at \u03c4= 0.5 to 9.1 at \u03c4= 2.0, with a 61.6 % reduction. However, the\nruntime increases from 0.3 minutes to 0.5 minutes. In the largest instance (N500E1000R100),\nextending \u03c4from 0.5 to 2.0 hours cuts the makespan by 57.9 % but raises runtime by 71.3 %.\nOn average across all ten instance classes, increasing \u03c4from 0.5 to 1.0 hour yields a 15.8 %\nreduction in makespan at the cost of a 39.6 % longer runtime. Similarly, increasing \u03c4further\nfrom 1.0 to 1.5 delivers a 30.8 % drop in makespan with a 15.8 % runtime penalty, and raising\n\u03c4from 1.5 to 2.0 brings another 30.7 % improvement in routing efficiency for a 5.7 % increase\nin runtime. Although today\u2019s commercial delivery drones typically operate flights of around\none hour, ongoing advances in drone battery capacity are rapidly extending their operational\nrange, making higher \u03c4values increasingly realistic in the near future.\n16\n\n--- Page 17 ---\n5.2.3 Analysis of \u03b4-hop Window\nUsing our proposed HGA, we analyze the effect of varying the parameter \u03b4. Figures 5a and 5b\nillustrate how adjusting the \u03b4-hop window influences the makespan for two instances belonging\nto classes N50E100R15 and N200E400N50, respectively. Recall that \u03b4= 1 implies each drone\nsortie departs from a truck stop and returns at the immediately subsequent truck stop, whereas\nhigher \u03b4values allow the truck to traverse up to \u03b4arcs before rendezvousing with the drone.\nThe experiments are conducted with a fixed fleet configuration K= 2 and M= 2, and drone\nflying time limit \u03c4= 1.0.\n1 2 3 4 5 6 717181920\n\u03b4Objective Value\n(a) Instance with N= 50, E= 100, and R= 15\n1 2 3 4 5 6 780828486889092\n\u03b4Objective Value (b) Instance with N= 200, E= 400, and N= 50\nFigure 5: Effect of varying \u03b4on the makespan of two instances\nGenerally, increasing \u03b4reduces the makespan since drones can rendezvous further from their\nlaunch points. However, the incremental benefit diminishes as \u03b4increases. Thus, practitioners\nshould select an appropriate \u03b4value by carefully balancing routing flexibility and makespan\nsavings against operational complexity and synchronization constraints, as excessively large \u03b4\nvalues may be practically infeasible.\n6 Conclusions\nThis paper introduced the Rural Postman Problem with multiple Trucks and Drones (RPP-\nmTD), a new arc-routing variant that captures multi-vehicle coordination in emerging truck\u2013drone\nlogistics. We developed a Hybrid Genetic Algorithm (HGA) with multiple neighborhood search\nmethods to effectively solve this problem. Benchmark experiments on small-scale instances with\none truck and one drone show that HGA achieves an average optimality gap of 2.25%, outper-\nforming the state-of-the-art ALNS (2.5%) while delivering solutions significantly faster. On\nlarger networks, up to 500 nodes and 100 required arcs, the algorithm scales well and produces\ngood quality solutions within minutes.\nOur experiments yield three managerial insights. (1) Adding trucks consistently reduces\nmakespan, whereas addition of drones per truck may not be useful for larger networks due to\nlimited drone flying time. (2) Extending drone flying time ( \u03c4) sharply lowers makespan but\ncan inflate runtime on very large instances. (3) Relaxing the drone launch node constraint\nthrough a \u03b4-hop window further decreases the makespan; however, beyond moderate \u03b4values,\nthe incremental benefit diminishes. Future research could explore extensions involving stochastic\ntravel times and non-linear battery consumption. Another promising direction is to study\nscenarios where drones are not specifically associated with individual trucks, allowing them to\nfly in and out of different trucks throughout the operation.\n17\n\n--- Page 18 ---\nAcknowledgments\nThis work was supported by the National Science Foundation under award number 2032458 and\nthe National Research Foundation of Korea grant (RS-2023-00259550) funded by the Ministry of\nScience and ICT. Part of this research was conducted during the first author\u2019s doctoral program\nat the University of South Florida.\nReferences\nAgatz, N., P. Bouman, M. Schmidt. 2018. Optimization approaches for the traveling salesman\nproblem with drone. Transportation Science 52(4) 965\u2013981.\nArakaki, R. K., F. L. Usberti. 2018. Hybrid genetic algorithm for the open capacitated arc\nrouting problem. Computers & Operations Research 90221\u2013231.\nAurambout, J.-P., K. Gkoumas, B. Ciuffo. 2022. A drone hop from the local shop? where could\ndrone delivery as a service happen in europe and the usa, and how many people could benefit\nfrom it? Transportation Research Interdisciplinary Perspectives 16100708.\nAvila, T., A. Corberan, I. Plana, J. M. Sanchis. 2016. A branch-and-cut algorithm for the\nprofitable windy rural postman problem. European Journal of Operational Research 249(3)\n1092\u20131101.\nBenavent, E., \u00b4A. Corber\u00b4 an, G. Desaulniers, F. Lessard, I. Plana, J. M. Sanchis. 2014. A branch-\nprice-and-cut algorithm for the min-max k-vehicle windy rural postman problem. Networks\n63(1) 34\u201345.\nBenavent, E., \u00b4A. Corber\u00b4 an, D. Lagan` a, F. Vocaturo. 2019. The periodic rural postman problem\nwith irregular services on mixed graphs. European Journal of Operational Research 276(3)\n826\u2013839.\nBogyrbayeva, A., T. Yoon, H. Ko, S. Lim, H. Yun, C. Kwon. 2023. A deep reinforcement\nlearning approach for solving the traveling salesman problem with drone. Transportation\nResearch Part C: Emerging Technologies 148103981.\nBouman, P., N. Agatz, M. Schmidt. 2018. Dynamic programming approaches for the traveling\nsalesman problem with drone. Networks 72(4) 528\u2013542.\nCampbell, J. F., \u00b4A. Corber\u00b4 an, I. Plana, J. M. Sanchis. 2018. Drone arc routing problems.\nNetworks 72(4) 543\u2013559.\nCampbell, J. F., \u00b4A. Corber\u00b4 an, I. Plana, J. M. Sanchis, P. Segura. 2021. Solving the length\nconstrained K-drones rural postman problem. European Journal of Operational Research\n292(1) 60\u201372.\nChristofides, N., V. Campos, A. Corber\u00b4 an, E. Mota. 1986. An algorithm for the rural postman\nproblem on a directed graph. Netflow at pisa 155\u2013166.\nChung, S. H., B. Sah, J. Lee. 2020. Optimization for drone and drone-truck combined operations:\nA review of the state of the art and future directions. Computers & Operations Research 123\n105004.\nColombi, M., \u00b4A. Corber\u00b4 an, R. Mansini, I. Plana, J. M. Sanchis. 2017. The hierarchical mixed\nrural postman problem. Transportation Science 51(2) 755\u2013770.\n18\n\n--- Page 19 ---\nColombi, M., R. Mansini. 2014. New results for the directed profitable rural postman problem.\nEuropean Journal of Operational Research 238(3) 760\u2013773.\nCorber\u00b4 an, A., R. Eglese, G. Hasle, I. Plana, J. M. Sanchis. 2021. Arc routing problems: A\nreview of the past, present, and future. Networks 77(1) 88\u2013115.\nCorber\u00b4 an, \u00b4A., G. Laporte. 2015. Arc routing: problems, methods, and applications . SIAM.\nCorber\u00b4 an, A., R. Mart\u00b4 \u0131, A. Romero. 2000. Heuristics for the mixed rural postman problem.\nComputers & Operations Research 27(2) 183\u2013203.\nCorber\u00b4 an, A., J. Sanchis. 1994. A polyhedral approach to the rural postman problem. European\nJournal of Operational Research 79(1) 95\u2013114.\nEl-Adle, A. M., A. Ghoniem, M. Haouari. 2023. A variable neighborhood search for parcel\ndelivery by vehicle with drone cycles. Computers & Operations Research 159106319.\nEuchi, J., A. Sadok. 2021. Hybrid genetic-sweep algorithm to solve the vehicle routing problem\nwith drones. Physical Communication 44101236.\nFern\u00b4 andez, E., G. Laporte, J. Rodr\u00b4 \u0131guez-Pereira. 2018. A branch-and-cut algorithm for the\nmultidepot rural postman problem. Transportation Science 52(2) 353\u2013369.\nHarrison, J. 2025. Amazon mk30 vs ehang eh216-s: Delivery drone comparison. https:\n//dronewaz.com/amazon-mk30-vs-ehang-eh216-s-delivery-drone-comparison/ . Ac-\ncessed: 07 Jun 2025.\nHertz, A., G. Laporte, M. Mittaz. 2000. A tabu search heuristic for the capacitated arc routing\nproblem. Operations Research 48(1) 129\u2013135.\nLacomme, P., C. Prins, W. Ramdane-Ch\u00b4 erif. 2001. A genetic algorithm for the capacitated arc\nrouting problem and its extensions. Workshops on Applications of Evolutionary Computation .\nSpringer, 473\u2013483.\nLee, J. H., M. Kim, J. Park, C. Kwon. 2025. The iterative chainlet partitioning algorithm\nfor the traveling salesman problem with drone and neural acceleration. arXiv preprint\narXiv:2504.15147 .\nLenstra, J. K., A. R. Kan. 1976. On general routing problems. Networks 6(3) 273\u2013280.\nLiu, X., S. H. Chung, C. Kwon. 2025. An adaptive large neighborhood search method for the\ndrone\u2013truck arc routing problem. Computers & Operations Research 176106959.\nLiu, Y., J. Shi, Z. Liu, J. Huang, T. Zhou. 2019. Two-layer routing for high-voltage powerline\ninspection by cooperated ground vehicle and drone. Energies 12(7) 1385.\nLongo, H., M. P. De Aragao, E. Uchoa. 2006. Solving capacitated arc routing problems using\na transformation to the CVRP. Computers & Operations Research 33(6) 1823\u20131837.\nLuo, H., P. Zhang, J. Wang, G. Wang, F. Meng. 2019. Traffic patrolling routing problem with\ndrones in an urban road system. Sensors 19(23) 5164.\nMacrina, G., L. D. P. Pugliese, F. Guerriero, G. Laporte. 2020. Drone-aided routing: A literature\nreview. Transportation Research Part C: Emerging Technologies 120102762.\n19\n\n--- Page 20 ---\nMahmoudinazlou, S., C. Kwon. 2024. A hybrid genetic algorithm with type-aware chromosomes\nfor traveling salesman problems with drone. European Journal of Operational Research 318(3)\n719\u2013739.\nMahmoudinazlou, S., C. Kwon, H. Charkhgard. 2024. Solving various classes of arc routing\nproblems with a memetic algorithm-based framework .\nMonroy-Licht, M., C. A. Amaya, A. Langevin. 2014. The rural postman problem with time\nwindows. Networks 64(3) 169\u2013180.\nMonroy-Licht, M., C. A. Amaya, A. Langevin. 2017. Adaptive large neighborhood search\nalgorithm for the rural postman problem with time windows. Networks 70(1) 44\u201359.\nMurray, C. C., A. G. Chu. 2015. The flying sidekick traveling salesman problem: Optimization\nof drone-assisted parcel delivery. Transportation Research Part C: Emerging Technologies 54\n86\u2013109.\nPearn, W. L., T. Wu. 1995. Algorithms for the rural postman problem. Computers & Operations\nResearch 22(8) 819\u2013828.\nRoberti, R., M. Ruthmair. 2021. Exact methods for the traveling salesman problem with drone.\nTransportation Science 55(2) 315\u2013335.\nSacramento, D., D. Pisinger, S. Ropke. 2019. An adaptive large neighborhood search metaheuris-\ntic for the vehicle routing problem with drones. Transportation Research Part C: Emerging\nTechnologies 102289\u2013315.\nSantos, L., J. Coutinho-Rodrigues, J. R. Current. 2010. An improved ant colony optimization\nbased algorithm for the capacitated arc routing problem. Transportation Research Part B:\nMethodological 44(2) 246\u2013266.\nSchermer, D., M. Moeini, O. Wendt. 2019. A matheuristic for the vehicle routing problem\nwith drones and its variants. Transportation Research Part C: Emerging Technologies 106\n166\u2013204.\nSobhanan, A., H. Charkhgard, I. Dayarian. 2024a. Equity-driven workload allocation for crowd-\nsourced last-mile delivery .\nSobhanan, A., S. Mahmoudinazlou, H. Charkhgard, C. Kwon. 2024b. A branch-and-price\nalgorithm for emergency humanitarian logistics with a mixed truck-drone fleet. Proceedings\nof the IISE Annual Conference & Expo .\nTamke, F., U. Buscher. 2021. A branch-and-cut algorithm for the vehicle routing problem with\ndrones. Transportation Research Part B: Methodological 144174\u2013203.\nVidal, T. 2017. Node, edge, arc routing and turn penalties: Multiple problems\u2014one neighbor-\nhood extension. Operations Research 65(4) 992\u20131010.\nWired Magazine. 2017. A drone-slinging UPS van delivers the future. URL https://mendoza.\nnd.edu/news/a-drone-slinging-ups-van-delivers-the-future/ . Accessed: 2025-06-06.\n20",
  "project_dir": "artifacts/projects/enhanced_cs.NE_2508.18105v1_Arc_Routing_Problems_with_Multiple_Trucks_and_Dron",
  "communication_dir": "artifacts/projects/enhanced_cs.NE_2508.18105v1_Arc_Routing_Problems_with_Multiple_Trucks_and_Dron/.agent_comm",
  "assigned_at": "2025-08-26T20:58:36.611995",
  "status": "assigned"
}